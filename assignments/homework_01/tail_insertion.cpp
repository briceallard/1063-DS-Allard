/**
* @ProgramName: EndSert.cpp
* @Author: Brice Allard
* @Description:
*			This is the structure of or a node that allows for back, end, or
				ordered insertion of a random number generated by srand.
* @Course: 1063 Data Structures
* @Semester: Spring 2017
* @Date: 07 02 2017
*/
#include <iostream>

struct Node {
	int Data;
	Node *Next;
};

using namespace std;

class List {
private:
	Node *Head;
	Node *Tail;
public:
	List() {
		Head = NULL;
		Tail = NULL;
	}

	/**
	* @FunctionName: FronSert
	* @Description:
	*				This function inserts integers into an array from the front.
	* @Params:
	*    int x;		// value passed from random number generator in main
	* @Returns:
	*    void
	*/
	void FrontSert(int x) {
		Node *Temp = new Node;
		Temp->Data = x;
		Temp->Next = NULL;

		if (Head) {
			Temp->Next = Head;
		}

		Head = Temp;

	}

	/**
	* @FunctionName: EndSert
	* @Description:
	*				This function inserts integers into an array from the end.
	* @Params:
	*    int x;		// value passed from random number generator in main
	* @Returns:
	*    void
	*/
	void EndSert(int x) {
		Node *Temp = new Node;
		Temp->Data = x;
		Temp->Next = NULL;

		if (!Tail) {
			Tail = Temp;
			Head = Temp;
		}
		else {
			Tail->Next = Temp;
			Tail = Temp;

		}
	}

	/**
	* @FunctionName: PrintList
	* @Description:
	*				This function prints the list
	* @Params:
	*			None
	* @Returns:
	*    void
	*/
	void PrintList() {
		if (!Head) {
			cout << "Empty" << endl;
			return;
		}
		else {
			Node *Temp = Head;
			while (Temp != NULL) {
				cout << Temp->Data << "->";
				Temp = Temp->Next;
			}
		}
	}

};

/**
* @FunctionName: main
* @Description:
*				Main function where random numbers are generated and sent.
* @Params:
*				none
* @Returns:
*				void
*/
int main() {
	srand(97097807);
	List L;
	for (int i = 0; i<10; i++) {
		//L.FrontSert(rand() % 100);
		L.EndSert(rand() % 100);
	}
	L.PrintList();


	return 0;
}
